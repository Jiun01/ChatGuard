{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"preference-page\"\n};\nconst _hoisted_2 = {\n  class: \"preference-item\"\n};\nconst _hoisted_3 = {\n  class: \"preference-item\"\n};\nconst _hoisted_4 = {\n  class: \"preference-item\"\n};\nconst _hoisted_5 = {\n  class: \"preference-item\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ToggleSwitch = _resolveComponent(\"ToggleSwitch\");\n  const _component_SidebarLayout = _resolveComponent(\"SidebarLayout\");\n  return _openBlock(), _createBlock(_component_SidebarLayout, null, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n      class: \"preference-text\"\n    }, \" Enable ChatGuard \", -1 /* HOISTED */)), _createVNode(_component_ToggleSwitch, {\n      modelValue: $data.enableForInstagram,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.enableForInstagram = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"div\", {\n      class: \"preference-text\"\n    }, \" Enable highlighting the abusive words \", -1 /* HOISTED */)), _createVNode(_component_ToggleSwitch, {\n      modelValue: $data.enableHighlighting,\n      \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.enableHighlighting = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_4, [_cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n      class: \"preference-text\"\n    }, \" Enable auto replacement of abusive words \", -1 /* HOISTED */)), _createVNode(_component_ToggleSwitch, {\n      modelValue: $data.enableAutoReplacement,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.enableAutoReplacement = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])]), _createElementVNode(\"div\", _hoisted_5, [_cache[7] || (_cache[7] = _createElementVNode(\"div\", {\n      class: \"preference-text\"\n    }, \" Enable abusive word detected notification \", -1 /* HOISTED */)), _createVNode(_component_ToggleSwitch, {\n      modelValue: $data.enableNotifications,\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.enableNotifications = $event)\n    }, null, 8 /* PROPS */, [\"modelValue\"])])])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","_createBlock","_component_SidebarLayout","default","_withCtx","_createElementVNode","_hoisted_1","_hoisted_2","_createVNode","_component_ToggleSwitch","modelValue","$data","enableForInstagram","_cache","$event","_hoisted_3","enableHighlighting","_hoisted_4","enableAutoReplacement","_hoisted_5","enableNotifications","_"],"sources":["C:\\Users\\Jiun\\Desktop\\chatguard\\chatguard\\src\\views\\PreferencePage.vue"],"sourcesContent":["<template>\r\n    <SidebarLayout>\r\n      <div class=\"preference-page\">\r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable ChatGuard\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableForInstagram\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable highlighting the abusive words\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableHighlighting\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable auto replacement of abusive words\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableAutoReplacement\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable abusive word detected notification\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableNotifications\" />\r\n        </div>\r\n      </div>\r\n    </SidebarLayout>\r\n  </template>\r\n  \r\n  <script>\r\n  import SidebarLayout from '@/components/SidebarLayout.vue'\r\n  import ToggleSwitch from '@/components/ToggleSwitch.vue'\r\n  \r\n  export default {\r\n    name: 'PreferencePage',\r\n    components: {\r\n      SidebarLayout,\r\n      ToggleSwitch\r\n    },\r\n    data() {\r\n      return {\r\n        // Default values\r\n        enableForInstagram: true,\r\n        enableHighlighting: true,\r\n        enableAutoReplacement: true,\r\n        enableNotifications: true\r\n      }\r\n    },\r\n    // Load settings from Chrome storage when the component is created\r\n    created() {\r\n      this.loadSettings()\r\n    },\r\n    // Watch for changes to our preferences and save them\r\n    watch: {\r\n      enableForInstagram(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableHighlighting(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableAutoReplacement(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableNotifications(newVal) {\r\n        this.saveSettings()\r\n      }\r\n    },\r\n    methods: {\r\n      // Save all settings to Chrome storage\r\n      saveSettings() {\r\n        // Check if we're in a Chrome extension environment\r\n        if (chrome && chrome.storage) {\r\n          chrome.storage.sync.set({\r\n            enableForInstagram: this.enableForInstagram,\r\n            enableHighlighting: this.enableHighlighting,\r\n            enableAutoReplacement: this.enableAutoReplacement,\r\n            enableNotifications: this.enableNotifications\r\n          })\r\n        } else {\r\n          // Fallback to localStorage for development\r\n          localStorage.setItem('chatguard-settings', JSON.stringify({\r\n            enableForInstagram: this.enableForInstagram,\r\n            enableHighlighting: this.enableHighlighting,\r\n            enableAutoReplacement: this.enableAutoReplacement,\r\n            enableNotifications: this.enableNotifications\r\n          }))\r\n        }\r\n      },\r\n      // Load all settings from Chrome storage\r\n      loadSettings() {\r\n        // Check if we're in a Chrome extension environment\r\n        if (chrome && chrome.storage) {\r\n          chrome.storage.sync.get([\r\n            'enableForInstagram',\r\n            'enableHighlighting',\r\n            'enableAutoReplacement',\r\n            'enableNotifications'\r\n          ], (result) => {\r\n            // Only update if the setting exists\r\n            if (result.enableForInstagram !== undefined) \r\n              this.enableForInstagram = result.enableForInstagram\r\n            if (result.enableHighlighting !== undefined) \r\n              this.enableHighlighting = result.enableHighlighting\r\n            if (result.enableAutoReplacement !== undefined) \r\n              this.enableAutoReplacement = result.enableAutoReplacement\r\n            if (result.enableNotifications !== undefined) \r\n              this.enableNotifications = result.enableNotifications\r\n          })\r\n        } else {\r\n          // Fallback to localStorage for development\r\n          const settings = JSON.parse(localStorage.getItem('chatguard-settings'))\r\n          if (settings) {\r\n            if (settings.enableForInstagram !== undefined) \r\n              this.enableForInstagram = settings.enableForInstagram\r\n            if (settings.enableHighlighting !== undefined) \r\n              this.enableHighlighting = settings.enableHighlighting\r\n            if (settings.enableAutoReplacement !== undefined) \r\n              this.enableAutoReplacement = settings.enableAutoReplacement\r\n            if (settings.enableNotifications !== undefined) \r\n              this.enableNotifications = settings.enableNotifications\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style lang=\"scss\" scoped>\r\n  @import '@/assets/styles/_variables.scss';\r\n  \r\n  .preference-page {\r\n    .preference-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 15px 0;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n      \r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n      \r\n      .preference-text {\r\n        font-size: 14px;\r\n        color: $midnight-blue;\r\n      }\r\n    }\r\n  }\r\n  </style>"],"mappings":";;EAEWA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAiB;;EAOvBA,KAAK,EAAC;AAAiB;;EAOvBA,KAAK,EAAC;AAAiB;;EAOvBA,KAAK,EAAC;AAAiB;;;;uBAvBhCC,YAAA,CA8BgBC,wBAAA;IA/BpBC,OAAA,EAAAC,QAAA,CAEM,MA4BM,CA5BNC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJD,mBAAA,CAKM,OALNE,UAKM,G,0BAJJF,mBAAA,CAEM;MAFDL,KAAK,EAAC;IAAiB,GAAC,oBAE7B,sBACAQ,YAAA,CAA6CC,uBAAA;MAPvDC,UAAA,EAOiCC,KAAA,CAAAC,kBAAkB;MAPnD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOiCH,KAAA,CAAAC,kBAAkB,GAAAE,MAAA;+CAG3CT,mBAAA,CAKM,OALNU,UAKM,G,0BAJJV,mBAAA,CAEM;MAFDL,KAAK,EAAC;IAAiB,GAAC,yCAE7B,sBACAQ,YAAA,CAA6CC,uBAAA;MAdvDC,UAAA,EAciCC,KAAA,CAAAK,kBAAkB;MAdnD,uBAAAH,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAciCH,KAAA,CAAAK,kBAAkB,GAAAF,MAAA;+CAG3CT,mBAAA,CAKM,OALNY,UAKM,G,0BAJJZ,mBAAA,CAEM;MAFDL,KAAK,EAAC;IAAiB,GAAC,4CAE7B,sBACAQ,YAAA,CAAgDC,uBAAA;MArB1DC,UAAA,EAqBiCC,KAAA,CAAAO,qBAAqB;MArBtD,uBAAAL,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAqBiCH,KAAA,CAAAO,qBAAqB,GAAAJ,MAAA;+CAG9CT,mBAAA,CAKM,OALNc,UAKM,G,0BAJJd,mBAAA,CAEM;MAFDL,KAAK,EAAC;IAAiB,GAAC,6CAE7B,sBACAQ,YAAA,CAA8CC,uBAAA;MA5BxDC,UAAA,EA4BiCC,KAAA,CAAAS,mBAAmB;MA5BpD,uBAAAP,MAAA,QAAAA,MAAA,MAAAC,MAAA,IA4BiCH,KAAA,CAAAS,mBAAmB,GAAAN,MAAA;;IA5BpDO,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}