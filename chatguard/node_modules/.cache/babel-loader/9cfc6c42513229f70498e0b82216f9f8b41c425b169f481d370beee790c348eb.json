{"ast":null,"code":"import SidebarLayout from '@/components/SidebarLayout.vue';\nimport ToggleSwitch from '@/components/ToggleSwitch.vue';\nexport default {\n  name: 'PreferencePage',\n  components: {\n    SidebarLayout,\n    ToggleSwitch\n  },\n  data() {\n    return {\n      // Default values\n      enableForInstagram: true,\n      enableHighlighting: true,\n      enableAutoReplacement: true,\n      enableNotifications: true\n    };\n  },\n  // Load settings from Chrome storage when the component is created\n  created() {\n    this.loadSettings();\n  },\n  // Watch for changes to our preferences and save them\n  watch: {\n    enableForInstagram(newVal) {\n      this.saveSettings();\n    },\n    enableHighlighting(newVal) {\n      this.saveSettings();\n    },\n    enableAutoReplacement(newVal) {\n      this.saveSettings();\n    },\n    enableNotifications(newVal) {\n      this.saveSettings();\n    }\n  },\n  methods: {\n    // Save all settings to Chrome storage\n    saveSettings() {\n      // Check if we're in a Chrome extension environment\n      if (chrome && chrome.storage) {\n        chrome.storage.sync.set({\n          enableForInstagram: this.enableForInstagram,\n          enableHighlighting: this.enableHighlighting,\n          enableAutoReplacement: this.enableAutoReplacement,\n          enableNotifications: this.enableNotifications\n        });\n      } else {\n        // Fallback to localStorage for development\n        localStorage.setItem('chatguard-settings', JSON.stringify({\n          enableForInstagram: this.enableForInstagram,\n          enableHighlighting: this.enableHighlighting,\n          enableAutoReplacement: this.enableAutoReplacement,\n          enableNotifications: this.enableNotifications\n        }));\n      }\n    },\n    // Load all settings from Chrome storage\n    loadSettings() {\n      // Check if we're in a Chrome extension environment\n      if (chrome && chrome.storage) {\n        chrome.storage.sync.get(['enableForInstagram', 'enableHighlighting', 'enableAutoReplacement', 'enableNotifications'], result => {\n          // Only update if the setting exists\n          if (result.enableForInstagram !== undefined) this.enableForInstagram = result.enableForInstagram;\n          if (result.enableHighlighting !== undefined) this.enableHighlighting = result.enableHighlighting;\n          if (result.enableAutoReplacement !== undefined) this.enableAutoReplacement = result.enableAutoReplacement;\n          if (result.enableNotifications !== undefined) this.enableNotifications = result.enableNotifications;\n        });\n      } else {\n        // Fallback to localStorage for development\n        const settings = JSON.parse(localStorage.getItem('chatguard-settings'));\n        if (settings) {\n          if (settings.enableForInstagram !== undefined) this.enableForInstagram = settings.enableForInstagram;\n          if (settings.enableHighlighting !== undefined) this.enableHighlighting = settings.enableHighlighting;\n          if (settings.enableAutoReplacement !== undefined) this.enableAutoReplacement = settings.enableAutoReplacement;\n          if (settings.enableNotifications !== undefined) this.enableNotifications = settings.enableNotifications;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["SidebarLayout","ToggleSwitch","name","components","data","enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications","created","loadSettings","watch","newVal","saveSettings","methods","chrome","storage","sync","set","localStorage","setItem","JSON","stringify","get","result","undefined","settings","parse","getItem"],"sources":["C:\\Users\\Jiun\\Desktop\\chatguard\\chatguard\\src\\views\\PreferencePage.vue"],"sourcesContent":["<template>\r\n    <SidebarLayout>\r\n      <div class=\"preference-page\">\r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable ChatGuard\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableForInstagram\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable highlighting the abusive words\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableHighlighting\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable auto replacement of abusive words\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableAutoReplacement\" />\r\n        </div>\r\n        \r\n        <div class=\"preference-item\">\r\n          <div class=\"preference-text\">\r\n            Enable abusive word detected notification\r\n          </div>\r\n          <ToggleSwitch v-model=\"enableNotifications\" />\r\n        </div>\r\n      </div>\r\n    </SidebarLayout>\r\n  </template>\r\n  \r\n  <script>\r\n  import SidebarLayout from '@/components/SidebarLayout.vue'\r\n  import ToggleSwitch from '@/components/ToggleSwitch.vue'\r\n  \r\n  export default {\r\n    name: 'PreferencePage',\r\n    components: {\r\n      SidebarLayout,\r\n      ToggleSwitch\r\n    },\r\n    data() {\r\n      return {\r\n        // Default values\r\n        enableForInstagram: true,\r\n        enableHighlighting: true,\r\n        enableAutoReplacement: true,\r\n        enableNotifications: true\r\n      }\r\n    },\r\n    // Load settings from Chrome storage when the component is created\r\n    created() {\r\n      this.loadSettings()\r\n    },\r\n    // Watch for changes to our preferences and save them\r\n    watch: {\r\n      enableForInstagram(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableHighlighting(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableAutoReplacement(newVal) {\r\n        this.saveSettings()\r\n      },\r\n      enableNotifications(newVal) {\r\n        this.saveSettings()\r\n      }\r\n    },\r\n    methods: {\r\n      // Save all settings to Chrome storage\r\n      saveSettings() {\r\n        // Check if we're in a Chrome extension environment\r\n        if (chrome && chrome.storage) {\r\n          chrome.storage.sync.set({\r\n            enableForInstagram: this.enableForInstagram,\r\n            enableHighlighting: this.enableHighlighting,\r\n            enableAutoReplacement: this.enableAutoReplacement,\r\n            enableNotifications: this.enableNotifications\r\n          })\r\n        } else {\r\n          // Fallback to localStorage for development\r\n          localStorage.setItem('chatguard-settings', JSON.stringify({\r\n            enableForInstagram: this.enableForInstagram,\r\n            enableHighlighting: this.enableHighlighting,\r\n            enableAutoReplacement: this.enableAutoReplacement,\r\n            enableNotifications: this.enableNotifications\r\n          }))\r\n        }\r\n      },\r\n      // Load all settings from Chrome storage\r\n      loadSettings() {\r\n        // Check if we're in a Chrome extension environment\r\n        if (chrome && chrome.storage) {\r\n          chrome.storage.sync.get([\r\n            'enableForInstagram',\r\n            'enableHighlighting',\r\n            'enableAutoReplacement',\r\n            'enableNotifications'\r\n          ], (result) => {\r\n            // Only update if the setting exists\r\n            if (result.enableForInstagram !== undefined) \r\n              this.enableForInstagram = result.enableForInstagram\r\n            if (result.enableHighlighting !== undefined) \r\n              this.enableHighlighting = result.enableHighlighting\r\n            if (result.enableAutoReplacement !== undefined) \r\n              this.enableAutoReplacement = result.enableAutoReplacement\r\n            if (result.enableNotifications !== undefined) \r\n              this.enableNotifications = result.enableNotifications\r\n          })\r\n        } else {\r\n          // Fallback to localStorage for development\r\n          const settings = JSON.parse(localStorage.getItem('chatguard-settings'))\r\n          if (settings) {\r\n            if (settings.enableForInstagram !== undefined) \r\n              this.enableForInstagram = settings.enableForInstagram\r\n            if (settings.enableHighlighting !== undefined) \r\n              this.enableHighlighting = settings.enableHighlighting\r\n            if (settings.enableAutoReplacement !== undefined) \r\n              this.enableAutoReplacement = settings.enableAutoReplacement\r\n            if (settings.enableNotifications !== undefined) \r\n              this.enableNotifications = settings.enableNotifications\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style lang=\"scss\" scoped>\r\n  @import '@/assets/styles/_variables.scss';\r\n  \r\n  .preference-page {\r\n    .preference-item {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      padding: 15px 0;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n      \r\n      &:last-child {\r\n        border-bottom: none;\r\n      }\r\n      \r\n      .preference-text {\r\n        font-size: 14px;\r\n        color: $midnight-blue;\r\n      }\r\n    }\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}