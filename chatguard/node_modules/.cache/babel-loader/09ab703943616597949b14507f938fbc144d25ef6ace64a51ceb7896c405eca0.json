{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {\n    settings: {\n      enableForInstagram: true,\n      enableHighlighting: true,\n      enableAutoReplacement: true,\n      enableNotifications: true\n    }\n  },\n  getters: {\n    getSettings: state => state.settings\n  },\n  mutations: {\n    SET_SETTING(state, {\n      key,\n      value\n    }) {\n      state.settings[key] = value;\n    },\n    SET_ALL_SETTINGS(state, settings) {\n      state.settings = {\n        ...state.settings,\n        ...settings\n      };\n    }\n  },\n  actions: {\n    // Save a single setting\n    saveSetting({\n      commit,\n      state\n    }, {\n      key,\n      value\n    }) {\n      commit('SET_SETTING', {\n        key,\n        value\n      });\n\n      // Save to Chrome storage if available\n      if (chrome && chrome.storage) {\n        const setting = {};\n        setting[key] = value;\n        chrome.storage.sync.set(setting);\n      } else {\n        // Fallback to localStorage\n        localStorage.setItem('chatguard-settings', JSON.stringify(state.settings));\n      }\n    },\n    // Load all settings\n    loadSettings({\n      commit\n    }) {\n      if (chrome && chrome.storage) {\n        chrome.storage.sync.get(null, items => {\n          if (Object.keys(items).length > 0) {\n            commit('SET_ALL_SETTINGS', items);\n          }\n        });\n      } else {\n        // Fallback to localStorage\n        const settings = JSON.parse(localStorage.getItem('chatguard-settings'));\n        if (settings) {\n          commit('SET_ALL_SETTINGS', settings);\n        }\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","state","settings","enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications","getters","getSettings","mutations","SET_SETTING","key","value","SET_ALL_SETTINGS","actions","saveSetting","commit","chrome","storage","setting","sync","set","localStorage","setItem","JSON","stringify","loadSettings","get","items","Object","keys","length","parse","getItem"],"sources":["C:/Users/Jiun/Desktop/chatguard/chatguard/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\n\r\nexport default createStore({\r\n  state: {\r\n    settings: {\r\n      enableForInstagram: true,\r\n      enableHighlighting: true,\r\n      enableAutoReplacement: true,\r\n      enableNotifications: true\r\n    }\r\n  },\r\n  getters: {\r\n    getSettings: state => state.settings\r\n  },\r\n  mutations: {\r\n    SET_SETTING(state, { key, value }) {\r\n      state.settings[key] = value\r\n    },\r\n    SET_ALL_SETTINGS(state, settings) {\r\n      state.settings = { ...state.settings, ...settings }\r\n    }\r\n  },\r\n  actions: {\r\n    // Save a single setting\r\n    saveSetting({ commit, state }, { key, value }) {\r\n      commit('SET_SETTING', { key, value })\r\n      \r\n      // Save to Chrome storage if available\r\n      if (chrome && chrome.storage) {\r\n        const setting = {}\r\n        setting[key] = value\r\n        chrome.storage.sync.set(setting)\r\n      } else {\r\n        // Fallback to localStorage\r\n        localStorage.setItem('chatguard-settings', JSON.stringify(state.settings))\r\n      }\r\n    },\r\n    \r\n    // Load all settings\r\n    loadSettings({ commit }) {\r\n      if (chrome && chrome.storage) {\r\n        chrome.storage.sync.get(null, (items) => {\r\n          if (Object.keys(items).length > 0) {\r\n            commit('SET_ALL_SETTINGS', items)\r\n          }\r\n        })\r\n      } else {\r\n        // Fallback to localStorage\r\n        const settings = JSON.parse(localStorage.getItem('chatguard-settings'))\r\n        if (settings) {\r\n          commit('SET_ALL_SETTINGS', settings)\r\n        }\r\n      }\r\n    }\r\n  }\r\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,kBAAkB,EAAE,IAAI;MACxBC,kBAAkB,EAAE,IAAI;MACxBC,qBAAqB,EAAE,IAAI;MAC3BC,mBAAmB,EAAE;IACvB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,WAAW,EAAEP,KAAK,IAAIA,KAAK,CAACC;EAC9B,CAAC;EACDO,SAAS,EAAE;IACTC,WAAWA,CAACT,KAAK,EAAE;MAAEU,GAAG;MAAEC;IAAM,CAAC,EAAE;MACjCX,KAAK,CAACC,QAAQ,CAACS,GAAG,CAAC,GAAGC,KAAK;IAC7B,CAAC;IACDC,gBAAgBA,CAACZ,KAAK,EAAEC,QAAQ,EAAE;MAChCD,KAAK,CAACC,QAAQ,GAAG;QAAE,GAAGD,KAAK,CAACC,QAAQ;QAAE,GAAGA;MAAS,CAAC;IACrD;EACF,CAAC;EACDY,OAAO,EAAE;IACP;IACAC,WAAWA,CAAC;MAAEC,MAAM;MAAEf;IAAM,CAAC,EAAE;MAAEU,GAAG;MAAEC;IAAM,CAAC,EAAE;MAC7CI,MAAM,CAAC,aAAa,EAAE;QAAEL,GAAG;QAAEC;MAAM,CAAC,CAAC;;MAErC;MACA,IAAIK,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;QAC5B,MAAMC,OAAO,GAAG,CAAC,CAAC;QAClBA,OAAO,CAACR,GAAG,CAAC,GAAGC,KAAK;QACpBK,MAAM,CAACC,OAAO,CAACE,IAAI,CAACC,GAAG,CAACF,OAAO,CAAC;MAClC,CAAC,MAAM;QACL;QACAG,YAAY,CAACC,OAAO,CAAC,oBAAoB,EAAEC,IAAI,CAACC,SAAS,CAACxB,KAAK,CAACC,QAAQ,CAAC,CAAC;MAC5E;IACF,CAAC;IAED;IACAwB,YAAYA,CAAC;MAAEV;IAAO,CAAC,EAAE;MACvB,IAAIC,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;QAC5BD,MAAM,CAACC,OAAO,CAACE,IAAI,CAACO,GAAG,CAAC,IAAI,EAAGC,KAAK,IAAK;UACvC,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;YACjCf,MAAM,CAAC,kBAAkB,EAAEY,KAAK,CAAC;UACnC;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA,MAAM1B,QAAQ,GAAGsB,IAAI,CAACQ,KAAK,CAACV,YAAY,CAACW,OAAO,CAAC,oBAAoB,CAAC,CAAC;QACvE,IAAI/B,QAAQ,EAAE;UACZc,MAAM,CAAC,kBAAkB,EAAEd,QAAQ,CAAC;QACtC;MACF;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}