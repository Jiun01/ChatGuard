let settings={enableForInstagram:!0,enableHighlighting:!0,enableAutoReplacement:!0,enableNotifications:!0};const API_URL="http://localhost:5000/api";function loadSettings(){chrome&&chrome.storage&&chrome.storage.sync.get(["enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications"],(e=>{e&&(settings={...settings,...e})}))}function attachListeners(){if(window.location.hostname.includes("instagram.com")&&!settings.enableForInstagram)return;const e=document.querySelectorAll('input[type="text"], textarea'),t=document.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500))})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500))}))}function debounce(e,t){let n;return function(...o){const a=this;clearTimeout(n),n=setTimeout((()=>e.apply(a,o)),t)}}async function analyzeInput(e){const t=e.target.value;if(t&&!(t.length<3))try{const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing input:",n)}}async function analyzeContentEditable(e){const t=e.target.innerText||e.target.textContent;if(t&&!(t.length<3))try{const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing contenteditable:",n)}}async function analyzeText(e){try{const t=await fetch(`${API_URL}/analyze`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:e,threshold:.5})});if(!t.ok)throw new Error(`API error: ${t.status}`);return await t.json()}catch(t){throw console.error("Error calling API:",t),t}}function handleAnalysisResult(e,t){resetHighlighting(t),e.is_offensive?(settings.enableHighlighting&&highlightOffensiveWords(t,e.offensive_words||[]),settings.enableAutoReplacement&&applyWordReplacement(t,e.offensive_words||[]),settings.enableNotifications&&showNotification(),t.dataset.containsOffensive="true",t.dataset.offensiveWords=JSON.stringify(e.offensive_words||[]),t.form&&!t.form.dataset.chatguardListener&&(t.form.addEventListener("submit",handleFormSubmit),t.form.dataset.chatguardListener="true")):(t.dataset.containsOffensive="false",t.dataset.offensiveWords="")}function highlightOffensiveWords(e,t){t&&0!==t.length&&("INPUT"===e.tagName||"TEXTAREA"===e.tagName?createHighlightOverlay(e,t):highlightContentEditableWords(e,t))}function createHighlightOverlay(e,t){e.style.backgroundColor="rgba(255, 200, 200, 0.2)";let n=e.nextElementSibling;n&&n.classList.contains("chatguard-overlay")||(n=document.createElement("div"),n.className="chatguard-overlay",n.style.cssText="\n      font-size: 12px;\n      margin-top: 4px;\n      color: #555;\n    ",e.parentNode.insertBefore(n,e.nextSibling)),n.innerHTML="Detected: "+t.map((e=>`<span style="color: red; font-weight: bold;">${e}</span>`)).join(", ")}function highlightContentEditableWords(e,t){if(!t||0===t.length)return;let n=e.innerHTML;const o=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),a=new RegExp("\\b("+o.join("|")+")\\b","gi"),r=n.replace(a,(e=>`<span style="background-color: rgba(255, 0, 0, 0.2); border-bottom: 2px solid red;">${e}</span>`));if(r!==n){const t=window.getSelection(),n=t.getRangeAt(0),o=n.startOffset,a=n.endOffset;e.innerHTML=r;try{if(t.rangeCount>0){const n=document.createRange();n.setStart(e.firstChild,Math.min(o,e.textContent.length)),n.setEnd(e.firstChild,Math.min(a,e.textContent.length)),t.removeAllRanges(),t.addRange(n)}}catch(i){console.error("Error restoring selection:",i)}}}function applyWordReplacement(e,t){if(!t||0===t.length)return;const n=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+n.join("|")+")\\b","gi");if("INPUT"===e.tagName||"TEXTAREA"===e.tagName){const t=e.selectionStart,n=e.value;e.value=n.replace(o,(e=>"*".repeat(e.length)));try{e.setSelectionRange(t,t)}catch(a){console.error("Error restoring cursor position:",a)}}else{const t=window.getSelection(),n=t.rangeCount>0?t.getRangeAt(0).cloneRange():null;if(e.textContent=e.textContent.replace(o,(e=>"*".repeat(e.length))),n)try{t.removeAllRanges(),t.addRange(n)}catch(a){console.error("Error restoring selection:",a)}}incrementReplacementCounter()}function resetHighlighting(e){e.style.border="",e.style.backgroundColor="",e.style.outline="";const t=e.nextElementSibling;t&&t.classList.contains("chatguard-overlay")&&t.remove()}function showNotification(){let e=document.querySelector(".chatguard-notification");e||(e=document.createElement("div"),e.className="chatguard-notification",e.style.cssText="\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background-color: #fff;\n      border: 2px solid #474DFF;\n      border-radius: 8px;\n      padding: 15px;\n      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n      z-index: 9999;\n      max-width: 300px;\n    ",document.body.appendChild(e)),e.innerHTML='\n    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">\n      <strong style="color: #001573;">Abusive words detected</strong>\n      <button style="background: none; border: none; cursor: pointer; font-size: 16px;">Ã—</button>\n    </div>\n    <p style="margin: 0; color: #333;">\n      Please edit your message for the next time.\n    </p>\n  ';const t=e.querySelector("button");t.addEventListener("click",(()=>{e.remove()})),setTimeout((()=>{document.body.contains(e)&&e.remove()}),5e3)}function handleFormSubmit(e){const t=e.target,n=t.querySelectorAll('[data-contains-offensive="true"]');n.length>0&&settings.enableAutoReplacement&&(n.forEach((e=>{const t=e.dataset.offensiveWords||"";"INPUT"===e.tagName||"TEXTAREA"===e.tagName?e.value=replaceOffensiveWords(e.value,t):e.innerText=replaceOffensiveWords(e.innerText,t)})),showNotification(),incrementReplacementCounter())}function replaceOffensiveWords(e,t){let n=[];try{n=JSON.parse(t||"[]")}catch(o){console.error("Error parsing offensive words:",o),n=[]}if(n&&n.length>0){const t=n.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+t.join("|")+")\\b","gi");return e.replace(o,(e=>"*".repeat(e.length)))}return"*".repeat(e.length)}loadSettings(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",attachListeners):attachListeners(),chrome&&chrome.storage&&chrome.storage.onChanged.addListener((e=>{for(let t in e)settings.hasOwnProperty(t)&&(settings[t]=e[t].newValue);attachListeners()}));const observer=new MutationObserver((e=>{for(const t of e)if(t.addedNodes&&t.addedNodes.length>0)for(let e=0;e<t.addedNodes.length;e++){const n=t.addedNodes[e];if(1===n.nodeType){const e=n.querySelectorAll('input[type="text"], textarea'),t=n.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500))})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500))}))}}}));function incrementReplacementCounter(){chrome&&chrome.storage&&chrome.storage.sync.get(["replacementData"],(e=>{const t=new Date,n=t.getMonth(),o=t.getFullYear();let a=e.replacementData||{count:0,month:n,year:o};a.month===n&&a.year===o||(a={count:0,month:n,year:o}),a.count+=1,chrome.storage.sync.set({replacementData:a})}))}observer.observe(document.body,{childList:!0,subtree:!0});