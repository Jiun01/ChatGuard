let settings={enableForInstagram:!0,enableHighlighting:!0,enableAutoReplacement:!0,enableNotifications:!0};const API_URL="http://localhost:5000/api";function loadSettings(){chrome&&chrome.storage&&chrome.storage.sync.get(["enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications"],(e=>{e&&(settings={...settings,...e})}))}function attachListeners(){if(window.location.hostname.includes("instagram.com")&&!settings.enableForInstagram)return;const e=document.querySelectorAll('input[type="text"], textarea'),t=document.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500))})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500))}))}function debounce(e,t){let n;return function(...o){const a=this;clearTimeout(n),n=setTimeout((()=>e.apply(a,o)),t)}}async function analyzeInput(e){const t=e.target.value;if(t&&!(t.length<3))try{const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing input:",n)}}async function analyzeContentEditable(e){const t=e.target.innerText||e.target.textContent;if(t&&!(t.length<3))try{const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing contenteditable:",n)}}async function analyzeText(e){try{const t=await fetch(`${API_URL}/analyze`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:e,threshold:.5})});if(!t.ok)throw new Error(`API error: ${t.status}`);return await t.json()}catch(t){throw console.error("Error calling API:",t),t}}async function handleAnalysisResult(e,t){if(console.log("ChatGuard analysis result:",e),resetHighlighting(t),e.is_offensive){console.log("ChatGuard detected offensive content"),await ensureSettingsLoaded(),settings.enableHighlighting&&highlightOffensiveWords(t,e.offensive_words||[]),settings.enableAutoReplacement&&applyWordReplacement(t,e.offensive_words||[]),console.log("ChatGuard notifications enabled:",settings.enableNotifications);const n=showNotification();console.log("ChatGuard notification displayed:",n),t.dataset.containsOffensive="true",t.dataset.offensiveWords=JSON.stringify(e.offensive_words||[]),t.form&&!t.form.dataset.chatguardListener&&(t.form.addEventListener("submit",handleFormSubmit),t.form.dataset.chatguardListener="true")}else t.dataset.containsOffensive="false",t.dataset.offensiveWords=""}function highlightOffensiveWords(e,t){t&&0!==t.length&&("INPUT"===e.tagName||"TEXTAREA"===e.tagName?createHighlightOverlay(e,t):highlightContentEditableWords(e,t))}function createHighlightOverlay(e,t){e.style.backgroundColor="rgba(255, 200, 200, 0.2)";let n=e.nextElementSibling;n&&n.classList.contains("chatguard-overlay")||(n=document.createElement("div"),n.className="chatguard-overlay",n.style.cssText="\n      font-size: 12px;\n      margin-top: 4px;\n      color: #555;\n    ",e.parentNode.insertBefore(n,e.nextSibling)),n.innerHTML="Detected: "+t.map((e=>`<span style="color: red; font-weight: bold;">${e}</span>`)).join(", ")}function highlightContentEditableWords(e,t){if(!t||0===t.length)return;let n=e.innerHTML;const o=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),a=new RegExp("\\b("+o.join("|")+")\\b","gi"),i=n.replace(a,(e=>`<span style="background-color: rgba(255, 0, 0, 0.2); border-bottom: 2px solid red;">${e}</span>`));if(i!==n){const t=window.getSelection(),n=t.getRangeAt(0),o=n.startOffset,a=n.endOffset;e.innerHTML=i;try{if(t.rangeCount>0){const n=document.createRange();n.setStart(e.firstChild,Math.min(o,e.textContent.length)),n.setEnd(e.firstChild,Math.min(a,e.textContent.length)),t.removeAllRanges(),t.addRange(n)}}catch(r){console.error("Error restoring selection:",r)}}}function applyWordReplacement(e,t){if(!t||0===t.length)return;const n=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+n.join("|")+")\\b","gi");if("INPUT"===e.tagName||"TEXTAREA"===e.tagName){const t=e.selectionStart,n=e.value;e.value=n.replace(o,(e=>"*".repeat(e.length)));try{e.setSelectionRange(t,t)}catch(a){console.error("Error restoring cursor position:",a)}}else{const t=window.getSelection(),n=t.rangeCount>0?t.getRangeAt(0).cloneRange():null;if(e.textContent=e.textContent.replace(o,(e=>"*".repeat(e.length))),n)try{t.removeAllRanges(),t.addRange(n)}catch(a){console.error("Error restoring selection:",a)}}}function resetHighlighting(e){e.style.border="",e.style.backgroundColor="",e.style.outline="";const t=e.nextElementSibling;t&&t.classList.contains("chatguard-overlay")&&t.remove()}function showNotification(){console.log("ChatGuard: Showing notification with shadow DOM approach");try{const e=document.querySelectorAll(".chatguard-notification-container");e.forEach((e=>{document.body.contains(e)&&document.body.removeChild(e)}));const t=document.createElement("div");t.className="chatguard-notification-container",t.style.cssText="\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      z-index: 2147483647; /* Max z-index */\n      width: 300px;\n      height: auto;\n    ",document.body.appendChild(t);const n=t.attachShadow({mode:"open"}),o=document.createElement("div");o.innerHTML='\n      <style>\n        .notification {\n          background-color: white;\n          border: 2px solid #474DFF;\n          border-radius: 8px;\n          padding: 15px;\n          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n          font-family: Arial, sans-serif;\n          animation: fadeIn 0.3s ease-in-out;\n          color: black;\n        }\n        \n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(20px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 10px;\n        }\n        \n        .title {\n          font-weight: bold;\n          color: #001573;\n        }\n        \n        .close-btn {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #888;\n        }\n        \n        .message {\n          margin: 0;\n          color: #333;\n        }\n      </style>\n      \n      <div class="notification">\n        <div class="header">\n          <div class="title">Abusive words detected</div>\n          <button class="close-btn">&times;</button>\n        </div>\n        <p class="message">Please edit your message for the next time.</p>\n      </div>\n    ',n.appendChild(o);const a=n.querySelector(".close-btn");return a.addEventListener("click",(()=>{document.body.contains(t)&&document.body.removeChild(t)})),setTimeout((()=>{document.body.contains(t)&&document.body.removeChild(t)}),5e3),console.log("ChatGuard: Notification should be visible now"),!0}catch(e){console.error("ChatGuard: Error showing notification:",e);try{return alert("ChatGuard: Abusive words detected. Please edit your message."),!0}catch(t){return console.error("ChatGuard: Even fallback alert failed:",t),!1}}}function handleFormSubmit(e){const t=e.target,n=t.querySelectorAll('[data-contains-offensive="true"]');n.length>0&&settings.enableAutoReplacement&&(n.forEach((e=>{const t=e.dataset.offensiveWords||"";"INPUT"===e.tagName||"TEXTAREA"===e.tagName?e.value=replaceOffensiveWords(e.value,t):e.innerText=replaceOffensiveWords(e.innerText,t)})),showNotification())}function replaceOffensiveWords(e,t){let n=[];try{n=JSON.parse(t||"[]")}catch(o){console.error("Error parsing offensive words:",o),n=[]}if(n&&n.length>0){const t=n.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+t.join("|")+")\\b","gi");return e.replace(o,(e=>"*".repeat(e.length)))}return"*".repeat(e.length)}loadSettings(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",attachListeners):attachListeners(),chrome&&chrome.storage&&chrome.storage.onChanged.addListener((e=>{for(let t in e)settings.hasOwnProperty(t)&&(settings[t]=e[t].newValue);attachListeners()}));const observer=new MutationObserver((e=>{for(const t of e)if(t.addedNodes&&t.addedNodes.length>0)for(let e=0;e<t.addedNodes.length;e++){const n=t.addedNodes[e];if(1===n.nodeType){const e=n.querySelectorAll('input[type="text"], textarea'),t=n.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500))})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500))}))}}}));function addToBackgroundJS(){chrome.runtime.onMessage.addListener(((e,t,n)=>{if("triggerTestNotification"===e.action)return chrome.tabs.query({active:!0,currentWindow:!0},(e=>{e.length>0&&chrome.tabs.sendMessage(e[0].id,{action:"testNotification"},(e=>{console.log("Test notification result:",e)}))})),!0}))}function simpleNotification(){const e=document.createElement("div");return e.style.cssText="\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border: 2px solid red;\n    padding: 20px;\n    z-index: 9999999;\n    font-family: Arial;\n    box-shadow: 0 0 10px rgba(0,0,0,0.5);\n  ",e.innerHTML="<strong>Abusive words detected!</strong><p>Please edit your message.</p>",document.body.appendChild(e),setTimeout((()=>{document.body.contains(e)&&document.body.removeChild(e)}),5e3),!0}chrome.runtime.onMessage.addListener(((e,t,n)=>{if("testNotification"===e.action){console.log("ChatGuard: Received test notification request");const e=showNotification();return n({success:e}),!0}})),observer.observe(document.body,{childList:!0,subtree:!0});