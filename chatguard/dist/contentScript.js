let settings={enableForInstagram:!0,enableHighlighting:!0,enableAutoReplacement:!0,enableNotifications:!0};const API_URL="http://localhost:5000/api",DEBUG=!0;function debugLog(e,t){DEBUG&&console.log(`ChatGuard: ${e}`,t||"")}function loadSettings(){chrome&&chrome.storage&&chrome.storage.sync.get(["enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications"],(e=>{e&&(settings={...settings,...e},debugLog("Settings loaded",settings))}))}function ensureSettingsLoaded(){return new Promise((e=>{chrome&&chrome.storage?chrome.storage.sync.get(["enableForInstagram","enableHighlighting","enableAutoReplacement","enableNotifications"],(t=>{t&&(settings={...settings,enableForInstagram:void 0===t.enableForInstagram||t.enableForInstagram,enableHighlighting:void 0===t.enableHighlighting||t.enableHighlighting,enableAutoReplacement:void 0===t.enableAutoReplacement||t.enableAutoReplacement,enableNotifications:void 0===t.enableNotifications||t.enableNotifications}),debugLog("Settings ensured",settings),e(settings)})):e(settings)}))}function attachListeners(){if(window.location.hostname.includes("instagram.com")&&!settings.enableForInstagram)return;debugLog("Attaching listeners to text inputs");const e=document.querySelectorAll('input[type="text"], textarea'),t=document.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500)),debugLog("Listener attached to input",e)})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500)),debugLog("Listener attached to contenteditable",e)}))}function debounce(e,t){let n;return function(...o){const a=this;clearTimeout(n),n=setTimeout((()=>e.apply(a,o)),t)}}async function analyzeInput(e){const t=e.target.value;if(t&&!(t.length<3))try{debugLog("Analyzing input",t);const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing input:",n)}}async function analyzeContentEditable(e){const t=e.target.innerText||e.target.textContent;if(t&&!(t.length<3))try{debugLog("Analyzing contenteditable",t);const n=await analyzeText(t);handleAnalysisResult(n,e.target)}catch(n){console.error("Error analyzing contenteditable:",n)}}async function analyzeText(e){try{debugLog("Calling API",e);const t=await fetch(`${API_URL}/analyze`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:e,threshold:.5})});if(!t.ok)throw new Error(`API error: ${t.status}`);const n=await t.json();return debugLog("API response",n),n}catch(t){console.error("Error calling API:",t),debugLog("Using fallback local analysis");const n=["fuck","shit","bitch","ass","asshole","dick"],o=e.toLowerCase().split(/\s+/),a=o.filter((e=>n.includes(e)));return{text:e,label:a.length>0?"offensive":"not offensive",probability:a.length>0?1:0,is_offensive:a.length>0,offensive_words:a}}}async function handleAnalysisResult(e,t){debugLog("Analysis result",e),resetHighlighting(t),e.is_offensive?(debugLog("Offensive content detected"),await ensureSettingsLoaded(),settings.enableHighlighting&&highlightOffensiveWords(t,e.offensive_words||[]),settings.enableAutoReplacement&&applyWordReplacement(t,e.offensive_words||[]),debugLog("Notifications enabled",settings.enableNotifications),settings.enableNotifications&&showNotification(),t.dataset.containsOffensive="true",t.dataset.offensiveWords=JSON.stringify(e.offensive_words||[]),t.form&&!t.form.dataset.chatguardListener&&(t.form.addEventListener("submit",handleFormSubmit),t.form.dataset.chatguardListener="true")):(t.dataset.containsOffensive="false",t.dataset.offensiveWords="")}function highlightOffensiveWords(e,t){t&&0!==t.length&&(debugLog("Highlighting offensive words",t),"INPUT"===e.tagName||"TEXTAREA"===e.tagName?createHighlightOverlay(e,t):highlightContentEditableWords(e,t))}function createHighlightOverlay(e,t){e.style.backgroundColor="rgba(255, 200, 200, 0.2)";let n=e.nextElementSibling;n&&n.classList.contains("chatguard-overlay")||(n=document.createElement("div"),n.className="chatguard-overlay",n.style.cssText="\n      font-size: 12px;\n      margin-top: 4px;\n      color: #555;\n    ",e.parentNode.insertBefore(n,e.nextSibling)),n.innerHTML="Detected: "+t.map((e=>`<span style="color: red; font-weight: bold;">${e}</span>`)).join(", ")}function highlightContentEditableWords(e,t){if(!t||0===t.length)return;let n=e.innerHTML;const o=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),a=new RegExp("\\b("+o.join("|")+")\\b","gi"),i=n.replace(a,(e=>`<span style="background-color: rgba(255, 0, 0, 0.2); border-bottom: 2px solid red;">${e}</span>`));if(i!==n){const t=window.getSelection(),n=t.getRangeAt(0),o=n.startOffset,a=n.endOffset;e.innerHTML=i;try{if(t.rangeCount>0){const n=document.createRange();n.setStart(e.firstChild,Math.min(o,e.textContent.length)),n.setEnd(e.firstChild,Math.min(a,e.textContent.length)),t.removeAllRanges(),t.addRange(n)}}catch(s){console.error("Error restoring selection:",s)}}}function applyWordReplacement(e,t){if(!t||0===t.length)return;debugLog("Replacing offensive words",t);const n=t.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+n.join("|")+")\\b","gi");if("INPUT"===e.tagName||"TEXTAREA"===e.tagName){const t=e.selectionStart,n=e.value;e.value=n.replace(o,(e=>"*".repeat(e.length)));try{e.setSelectionRange(t,t)}catch(a){console.error("Error restoring cursor position:",a)}}else{const t=window.getSelection(),n=t.rangeCount>0?t.getRangeAt(0).cloneRange():null;if(e.textContent=e.textContent.replace(o,(e=>"*".repeat(e.length))),n)try{t.removeAllRanges(),t.addRange(n)}catch(a){console.error("Error restoring selection:",a)}}}function resetHighlighting(e){e.style.border="",e.style.backgroundColor="",e.style.outline="";const t=e.nextElementSibling;t&&t.classList.contains("chatguard-overlay")&&t.remove()}function showNotification(){debugLog("Showing notification");try{const e=document.createElement("div");e.style.cssText="\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: white;\n      border: 2px solid #474DFF;\n      border-radius: 8px;\n      padding: 15px;\n      box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n      z-index: 2147483647;\n      width: 300px;\n      font-family: Arial, sans-serif;\n      color: black;\n      animation: chatguardFadeIn 0.3s ease-in-out;\n    ";let t=document.getElementById("chatguard-styles");t||(t=document.createElement("style"),t.id="chatguard-styles",t.innerHTML="\n        @keyframes chatguardFadeIn {\n          from { opacity: 0; transform: translateY(20px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n      ",document.head.appendChild(t)),e.innerHTML='\n      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">\n        <div style="font-weight: bold; color: #001573;">Abusive words detected</div>\n        <button id="chatguard-close-btn" style="background: none; border: none; font-size: 18px; cursor: pointer; color: #888;">&times;</button>\n      </div>\n      <p style="margin: 0; color: #333;">Please edit your message for the next time.</p>\n    ',document.body.appendChild(e);const n=document.getElementById("chatguard-close-btn");return n&&n.addEventListener("click",(()=>{document.body.contains(e)&&document.body.removeChild(e)})),setTimeout((()=>{document.body.contains(e)&&document.body.removeChild(e)}),5e3),!0}catch(e){console.error("Error showing notification:",e);try{return alert("ChatGuard: Abusive words detected. Please edit your message."),!0}catch(t){return console.error("Even fallback alert failed:",t),!1}}}async function handleFormSubmit(e){const t=e.target,n=t.querySelectorAll('[data-contains-offensive="true"]');n.length>0&&(debugLog("Form submission with offensive content detected"),await ensureSettingsLoaded(),settings.enableAutoReplacement&&(n.forEach((e=>{const t=e.dataset.offensiveWords||"";"INPUT"===e.tagName||"TEXTAREA"===e.tagName?e.value=replaceOffensiveWords(e.value,t):e.innerText=replaceOffensiveWords(e.innerText,t)})),settings.enableNotifications&&showNotification()))}function replaceOffensiveWords(e,t){let n=[];try{n=JSON.parse(t||"[]")}catch(o){console.error("Error parsing offensive words:",o),n=[]}if(n&&n.length>0){const t=n.map((e=>e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"))),o=new RegExp("\\b("+t.join("|")+")\\b","gi");return e.replace(o,(e=>"*".repeat(e.length)))}return"*".repeat(e.length)}function testNotification(){return debugLog("Testing notification system"),showNotification()}loadSettings(),window.testChatGuardNotification=testNotification,chrome.runtime.onMessage.addListener(((e,t,n)=>{if("testNotification"===e.action){debugLog("Received test notification request");const e=showNotification();return n({success:e}),!0}})),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",attachListeners):attachListeners(),chrome&&chrome.storage&&chrome.storage.onChanged.addListener((e=>{for(let t in e)settings.hasOwnProperty(t)&&(settings[t]=e[t].newValue);debugLog("Settings changed",settings),attachListeners()}));const observer=new MutationObserver((e=>{for(const t of e)if(t.addedNodes&&t.addedNodes.length>0)for(let e=0;e<t.addedNodes.length;e++){const n=t.addedNodes[e];if(1===n.nodeType){const e=n.querySelectorAll('input[type="text"], textarea'),t=n.querySelectorAll('[contenteditable="true"]');e.forEach((e=>{e.addEventListener("input",debounce(analyzeInput,500))})),t.forEach((e=>{e.addEventListener("input",debounce(analyzeContentEditable,500))}))}}}));observer.observe(document.body,{childList:!0,subtree:!0}),debugLog("Content script loaded and ready");